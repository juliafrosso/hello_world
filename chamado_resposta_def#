def square(n):
# def = função (essa função pode ser chamada várias vezes)
  
    squared = n**2
    print "%d squared is %d." % (n, squared)
    return squared
    

square(10)
# aqui foi atribuido o valor 10 a variável n, assim o sistema considera n = 10 e a substitui na equação o que resulta em 10**2 = 100

----------

def power(base, exponent):  
# é possível uma função com mais de um argumento (eles são separados por vírgula)
    result = base**exponent
    print "%d elevado a %d e %d." % (base, exponent, result)

power(37,4)
# na hora de atribuir valores ao argumentos é só separar os valores por vírgula também (na ordem dada na função inicialmente)

----------

def one_good_turn(n):
    return n + 1
    
def deserves_another(n):
    return one_good_turn(n) + 2
  
# aqui a segunda função chamou a primeira

------------

def cube(number):
    cube = number**3
    return cube
    
def by_three(number):
    if number % 3 == 0:
        return cube(number)
        # retorna a primeira função apenas que o número adicionado na variável for divisivel por 3
        # note que usei % que resulta no resto da divisão, um número será divisível por 3 quando restar 0 
    else:
        return False
        
       
 --------------
  
 def shut_down(s):
    if s == 'yes':
        return "Desligando"
    elif s == 'no':
        return "Desligamento abortado"
    else:
        return "Desculpe"
        
        
